plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.springframework.experimental.aot' version '0.12.0'
}

apply plugin: 'io.spring.dependency-management'
apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi'
description = """cadastral data disposal"""

sourceCompatibility = '17'
targetCompatibility = '17'

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

bootJar {
   archiveName = baseName + "-" + version + "-exec.jar"
}

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation platform('software.amazon.awssdk:bom:2.17.219')
    implementation 'software.amazon.awssdk:s3'
    developmentOnly 'org.springframework.boot:spring-boot-starter-actuator' 
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

/*
springAot {
    //mode = AotMode.NATIVE_AGENT
    debugVerify = false
    removeXmlSupport = false
    //removeSpelSupport = false
    removeYamlSupport = false
    removeJmxSupport = true
    verify = true
}
*/

nativeBuild {
    verbose = true
    fallback = false
    buildArgs.add("--libc=musl")
    buildArgs.add("--static")
}


import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: av_datenabgabe
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)
